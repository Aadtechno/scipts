pipeline {
    agent { label 'gke-access-node' }

    environment {
        DEPLOYMENTS = "app-1,app-2,app-3"
        NAMESPACE = "default"
    }

    stages {
        stage('Check for Rollouts') {
            steps {
                script {
                    def changed = false
                    def deployments = env.DEPLOYMENTS.split(',')

                    for (dep in deployments) {
                        def generation = sh(
                            script: "kubectl get deploy ${dep} -n ${env.NAMESPACE} -o jsonpath='{.metadata.generation}'",
                            returnStdout: true
                        ).trim()

                        def observed = sh(
                            script: "kubectl get deploy ${dep} -n ${env.NAMESPACE} -o jsonpath='{.status.observedGeneration}'",
                            returnStdout: true
                        ).trim()

                        echo "[${dep}] Generation=${generation}, Observed=${observed}"

                        if (generation != observed) {
                            echo "[${dep}] Deployment changed!"
                            changed = true
                            break // trigger on first detected change
                        }
                    }

                    if (changed) {
                        echo "Deployment change detected! Triggering Job-2..."
                        build job: 'Job-2'
                    } else {
                        echo "No changes in monitored deployments."
                    }
                }
            }
        }
    }
}
------
pipeline {
    agent { label 'gke-access-node' }

    environment {
        DEPLOYMENT = "app-1"
        NAMESPACE = "default"
        STATE_FILE = "revision.txt"
    }

    stages {
        stage('Restore Previous Revision') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        unstash 'revision-state'
                    }
                }
            }
        }

        stage('Check Deployment Revision') {
            steps {
                script {
                    def previous = fileExists(STATE_FILE) ? readFile(STATE_FILE).trim() : ""

                    def current = sh(
                        script: '''
                            kubectl get deployment ${DEPLOYMENT} -n ${NAMESPACE} \
                            -o jsonpath="{.metadata.annotations['deployment.kubernetes.io/revision']}"
                        ''',
                        returnStdout: true
                    ).trim()


                    echo "Previous revision: ${previous}"
                    echo "Current  revision: ${current}"

                    if (current != previous) {
                        echo "ðŸ”„ Deployment revision changed!"
                        build job: 'Job-2'
                        writeFile file: STATE_FILE, text: current
                    } else {
                        echo "âœ… No deployment change detected."
                    }
                }
            }
        }

        stage('Save Current Revision') {
            steps {
                stash name: 'revision-state', includes: STATE_FILE
            }
        }
    }
}

