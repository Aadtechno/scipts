withEnv(["SECRET_VALUE=${params.SECRET_VALUE}"]) {
  sh """
    printf '%s' "\$SECRET_VALUE" | \
    gcloud secrets versions add ${env.SECRET_NAME} \
      --data-file=- \
      --project=${params.GCP_PROJECT_ID}
  """
}

withEnv(["SECRET_VALUE=${params.SECRET_VALUE}"]) {
    sh '''#!/bin/bash
    printf "%s" "$SECRET_VALUE" | gcloud secrets versions add "$SECRET_NAME" \
      --data-file=- \
      --project="$GCP_PROJECT_ID"
    '''
}

echo "\033[1;32m✔ Secret ${env.SECRET_NAME} created successfully\033[0m"


def secretTypeChoices = ['oauth', 'api-key', 'tls-ssl', 'database', 'other']
String node_label = ''

if (params.GCP_PROJECT_ID == 'tim-hortans-can-npe') {
    node_label = 'tim-hortans-can-npelabel'
} else if (params.ENV == 'tim-hortans-can-uat') {
    node_label = 'tim-hortans-can-uatlabel'
} else if (params.ENV == 'tim-hortans-can-qa') {
    node_label = 'tim-hortans-can-qalabel'
} else if (params.ENV == 'tim-hortans-can-prod') {
    node_label = 'tim-hortans-can-prodlabel'
}

pipeline {
    agent { label "$node_label" }

    parameters {
        choice(name: 'GCP_PROJECT_ID', choices: ['tim-hortans-can-npe', 'tim-hortans-can-uat', 'tim-hortans-can-prod'], description: 'Select the GCP Project ID')
        string(name: 'Preferred_Secret_Name', description: 'Short name for the secret (max 15 characters, e.g., myappkey)')
        password(name: 'SECRET_VALUE', defaultValue: '', description: 'The actual secret value (masked in console)')
        string(name: 'Service_Account', description: 'Service Account Email ID')
        string(name: 'BAPID', description: 'BAPID for labels')
        string(name: 'Cmd_Bus_Svc_Id', description: 'Command Bus Service ID for labels')
        string(name: 'cost_center', description: 'Cost center for labels')
        string(name: 'data_class', description: 'Data classification for labels')
        string(name: 'division', description: 'Division for labels')
        choice(name: 'Secret_Type', choices: secretTypeChoices, description: 'Select type of Secret')
    }

    stages {

        stage('GCP Project Configuration') {
            steps {
                sh """
                    gcloud config set project ${params.GCP_PROJECT_ID}
                    gcloud config list
                """
            }
        }

        stage('Create or Update GCP Secret') {
            steps {
                script {
                    // ✅ Validate required parameters
                    def requiredParams = [
                        'Preferred_Secret_Name',
                        'SECRET_VALUE',
                        'Service_Account',
                        'BAPID',
                        'Cmd_Bus_Svc_Id',
                        'cost_center',
                        'data_class',
                        'division',
                        'Secret_Type'
                    ]
                    for (param in requiredParams) {
                        def value = params[param]
                        if (!value?.trim()) {
                            error "❌ Parameter '${param}' is required and cannot be empty."
                        }
                    }

                    // ✅ Enforce max length on Preferred_Secret_Name
                    if (params.Preferred_Secret_Name.length() > 15) {
                        error "❌ Preferred_Secret_Name must not exceed 15 characters. Provided: '${params.Preferred_Secret_Name}' (${params.Preferred_Secret_Name.length()} chars)"
                    }

                    def projectNameOnly = sh(script: "echo \"${params.GCP_PROJECT_ID}\" | rev | cut -d'-' -f2- | rev", returnStdout: true).trim()
                    def baseSecretName = "${params.Secret_Type}-${projectNameOnly}-${params.Preferred_Secret_Name}"
                    def generatedSecretName = baseSecretName
                    env.SECRET_NAME = generatedSecretName

                    def labelString = "data_class=${params.data_class},cmdb_bus_svc_id=${params.Cmd_Bus_Svc_Id},bapid=${params.BAPID},secret_type=${params.Secret_Type.toLowerCase()},cost_center=${params.cost_center},division=${params.division}"

                    // ✅ Check if secret exists
                    def secretExists = false
                    try {
                        sh "gcloud secrets describe ${env.SECRET_NAME} --project=${params.GCP_PROJECT_ID} > /dev/null 2>&1"
                        secretExists = true
                    } catch (Exception e) {
                        secretExists = false
                    }

                    // ✅ Create if it doesn't exist
                    if (!secretExists) {
                        sh "gcloud secrets create ${env.SECRET_NAME} --project=${params.GCP_PROJECT_ID} --labels='${labelString}'"
                    }

                    // ✅ Add new version securely
                    withEnv(["SECRET_VALUE=${params.SECRET_VALUE}"]) {
                        sh '''#!/bin/bash
                        printf "%s" "$SECRET_VALUE" | gcloud secrets versions add "$SECRET_NAME" \
                          --data-file=- \
                          --project="$GCP_PROJECT_ID"
                        '''
                    }

                    // ✅ Bind IAM policy
                    sh """
                        gcloud secrets add-iam-policy-binding ${env.SECRET_NAME} \
                        --member=serviceAccount:${params.Service_Account} \
                        --role=roles/secretmanager.secretAccessor \
                        --project=${params.GCP_PROJECT_ID}
                    """

                    // ✅ Final concise output
                    echo "✔ Secret '${env.SECRET_NAME}' created/updated successfully with IAM binding for '${params.Service_Account}'"
                }
            }
        }

        stage('Describe Secret and IAM Bindings') {
            steps {
                sh '''
                    echo "Secret: ${SECRET_NAME} (project: ${GCP_PROJECT_ID})"
                    gcloud secrets describe "${SECRET_NAME}" --project="${GCP_PROJECT_ID}"
                    gcloud secrets versions list "${SECRET_NAME}" --project="${GCP_PROJECT_ID}"
                    gcloud secrets get-iam-policy "${SECRET_NAME}" --project="${GCP_PROJECT_ID}"
                '''
            }
        }
    }
}

-----
def secretTypeChoices = ['oauth', 'api-key', 'tls-ssl', 'database', 'other']
String node_label = ''

if (params.GCP_PROJECT_ID == 'tim-hortans-can-npe') {
    node_label = 'tim-hortans-can-npelabel'
} else if (params.ENV == 'tim-hortans-can-uat') {
    node_label = 'tim-hortans-can-uatlabel'
} else if (params.ENV == 'tim-hortans-can-qa') {
    node_label = 'tim-hortans-can-qalabel'
} else if (params.ENV == 'tim-hortans-can-prod') {
    node_label = 'tim-hortans-can-prodlabel'
}

pipeline {
    agent { label "$node_label" }

    options {
        ansiColor('xterm')
    }

    parameters {
        choice(name: 'GCP_PROJECT_ID', choices: ['tim-hortans-can-npe', 'tim-hortans-can-uat', 'tim-hortans-can-prod'], description: 'Select the GCP Project ID')
        string(name: 'Preferred_Secret_Name', description: 'Short name for the secret (max 15 characters, e.g., myappkey)')
        password(name: 'SECRET_VALUE', defaultValue: '', description: 'The actual secret value (masked in console)')
        string(name: 'Service_Account', description: 'Service Account Email ID')
        string(name: 'BAPID', description: 'BAPID for labels')
        string(name: 'Cmd_Bus_Svc_Id', description: 'Command Bus Service ID for labels')
        string(name: 'cost_center', description: 'Cost center for labels')
        string(name: 'data_class', description: 'Data classification for labels')
        string(name: 'division', description: 'Division for labels')
        choice(name: 'Secret_Type', choices: secretTypeChoices, description: 'Select type of Secret')
    }

    stages {

        stage('GCP Project Configuration') {
            steps {
                sh """
                    gcloud config set project ${params.GCP_PROJECT_ID}
                    gcloud config list
                """
            }
        }

        stage('Create or Update GCP Secret') {
            steps {
                script {
                    // ✅ Require approval for UAT/PROD
                    if (params.GCP_PROJECT_ID in ['tim-hortans-can-uat', 'tim-hortans-can-prod']) {
                        input message: "Approval required to proceed with deployment to project '${params.GCP_PROJECT_ID}'", ok: "Approve", submitter: "alice,bob"
                    }

                    // ✅ Validate required parameters
                    def requiredParams = [
                        'Preferred_Secret_Name',
                        'SECRET_VALUE',
                        'Service_Account',
                        'BAPID',
                        'Cmd_Bus_Svc_Id',
                        'cost_center',
                        'data_class',
                        'division',
                        'Secret_Type'
                    ]
                    for (param in requiredParams) {
                        def value = params[param]
                        if (!value?.trim()) {
                            error "❌ Parameter '${param}' is required and cannot be empty."
                        }
                    }

                    // ✅ Enforce max length on Preferred_Secret_Name
                    if (params.Preferred_Secret_Name.length() > 15) {
                        error "❌ Preferred_Secret_Name must not exceed 15 characters. Provided: '${params.Preferred_Secret_Name}' (${params.Preferred_Secret_Name.length()} chars)"
                    }

                    def projectNameOnly = sh(script: "echo \"${params.GCP_PROJECT_ID}\" | rev | cut -d'-' -f2- | rev", returnStdout: true).trim()
                    def baseSecretName = "${params.Secret_Type}-${projectNameOnly}-${params.Preferred_Secret_Name}"
                    def generatedSecretName = baseSecretName
                    env.SECRET_NAME = generatedSecretName

                    def labelString = "data_class=${params.data_class},cmdb_bus_svc_id=${params.Cmd_Bus_Svc_Id},bapid=${params.BAPID},secret_type=${params.Secret_Type.toLowerCase()},cost_center=${params.cost_center},division=${params.division}"

                    // ✅ Check if secret exists
                    def secretExists = false
                    try {
                        sh "gcloud secrets describe ${env.SECRET_NAME} --project=${params.GCP_PROJECT_ID} > /dev/null 2>&1"
                        secretExists = true
                    } catch (Exception e) {
                        secretExists = false
                    }

                    // ✅ Create if it doesn't exist
                    if (!secretExists) {
                        sh "gcloud secrets create ${env.SECRET_NAME} --project=${params.GCP_PROJECT_ID} --labels='${labelString}'"
                    }

                    // ✅ Add new version securely
                    withEnv(["SECRET_VALUE=${params.SECRET_VALUE}"]) {
                        sh '''#!/bin/bash
                        printf "%s" "$SECRET_VALUE" | gcloud secrets versions add "$SECRET_NAME" \
                          --data-file=- \
                          --project="$GCP_PROJECT_ID"
                        '''
                    }

                    // ✅ Bind IAM policy
                    sh """
                        gcloud secrets add-iam-policy-binding ${env.SECRET_NAME} \
                        --member=serviceAccount:${params.Service_Account} \
                        --role=roles/secretmanager.secretAccessor \
                        --project=${params.GCP_PROJECT_ID}
                    """

                    // ✅ Success message in green
                    echo "\u001B[32m✔ Secret '${env.SECRET_NAME}' created/updated successfully with IAM binding for '${params.Service_Account}'\u001B[0m"
                }
            }
        }

        stage('Describe Secret and IAM Bindings') {
            steps {
                sh '''
                    echo "Secret: ${SECRET_NAME} (project: ${GCP_PROJECT_ID})"
                    gcloud secrets describe "${SECRET_NAME}" --project="${GCP_PROJECT_ID}"
                    gcloud secrets versions list "${SECRET_NAME}" --project="${GCP_PROJECT_ID}"
                    gcloud secrets get-iam-policy "${SECRET_NAME}" --project="${GCP_PROJECT_ID}"
                '''
            }
        }
    }
}

