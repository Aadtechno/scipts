properties([
    buildDiscarder(logRotator(
        artifactDaysToKeepStr: '',
        artifactNumToKeepStr: '',
        daysToKeepStr: '',
        numToKeepStr: '10'))
])

pipeline {
    agent any

    parameters {
        text(name: 'npe_uat',
             defaultValue: 'gs://npe-bucket/folder/a.txt,gs://uat-bucket/folder/a.txt',
             description: 'Provide source and destination GCS paths separated by comma.\n' +
                          'Example: gs://npe-bucket/folder/a.txt,gs://uat-bucket/folder/a.txt')
    }

    stages {
        stage("Parse & Validate") {
            steps {
                script {
                    def parts = params.npe_uat.split(",")
                    if (parts.size() != 2) {
                        error "Invalid input. Must provide exactly two comma-separated URIs."
                    }
                    env.SOURCE = parts[0].trim()
                    env.DEST   = parts[1].trim()

                    if (!env.SOURCE.startsWith("gs://") || !env.DEST.startsWith("gs://")) {
                        error "Both source and destination must start with gs://"
                    }

                    echo "Source : ${env.SOURCE}"
                    echo "Dest   : ${env.DEST}"
                }
            }
        }

        stage("Download file to Jenkins node") {
            steps {
                dir("${WORKSPACE}/jenkins/npe-to-uat/") {
                    sh '''
                        set -xe
                        mkdir -p payload
                        gsutil cp "${SOURCE}" ./payload/
                        gsutil ls -l "${SOURCE}" || true
                        ls -lah ./payload
                    '''
                    stash name: 'artifact', includes: 'payload/**', allowEmpty: false
                }
            }
        }

        stage("Upload file to UAT") {
            steps {
                dir("${WORKSPACE}/jenkins/npe-to-uat/") {
                    unstash 'artifact'
                    sh '''
                        set -xe
                        FILE=$(find ./payload -type f)
                        echo "Uploading $FILE -> ${DEST}"
                        gsutil cp "$FILE" "${DEST}"
                        gsutil ls -l "${DEST}" || true
                    '''
                }
            }
        }
    }
}
---------------------
properties([buildDiscarder(logRotator(numToKeepStr: '10'))])

pipeline {
  agent none

  parameters {
    // One pair per line: SRC,DST
    // Example:
    // gs://npebucket/txt1.txt,gs://uatbucket/txt1.txt
    // gs://npebucket/txt2.txt,gs://uatbucket/txt2.txt
    text(name: 'npe_uat',
         defaultValue: '''gs://npebucket/txt1.txt,gs://uatbucket/txt1.txt
gs://npebucket/txt2.txt,gs://uatbucket/txt2.txt''',
         description: 'Each line = SRC_GCS_URI,DST_GCS_URI')
  }

  stages {

    stage('Download on NPE') {
      agent { label 'npe-label' } // <-- your NPE node label
      steps {
        dir("${WORKSPACE}/npe-to-uat") {
          sh '''
            set -e
            rm -rf jars && mkdir -p jars
            # For each line: SRC,DST -> download SRC to jars/<basename>
            echo "$npe_uat" | while IFS=, read -r SRC DST; do
              [ -z "$SRC" ] && continue
              BASENAME=$(basename "$SRC")
              echo "Downloading: $SRC -> jars/$BASENAME"
              gsutil cp "$SRC" "jars/$BASENAME"
            done
          '''
          stash name: 'jars', includes: 'jars/**'
        }
      }
    }

    stage('Upload on UAT (sequential)') {
      agent { label 'uat-label' } // <-- your UAT node label
      steps {
        dir("${WORKSPACE}/npe-to-uat") {
          deleteDir()
          unstash 'jars'
          sh '''
            set -e
            # For each line again: SRC,DST -> upload jars/<basename> to DST, then delete local
            echo "$npe_uat" | while IFS=, read -r SRC DST; do
              [ -z "$SRC" ] && continue
              BASENAME=$(basename "$SRC")
              FILE="jars/$BASENAME"
              echo "Uploading: $FILE -> $DST"
              gsutil cp "$FILE" "$DST"
              gsutil ls -l "$DST" || true
              rm -f "$FILE"
              echo "Done: $BASENAME"
              echo "---------------------"
            done
          '''
        }
      }
    }
  }
}
----
pipeline {
  agent none
  parameters {
    text(
      name: 'npe_uat',
      defaultValue: '''
gs://npebucket/txt1.txt,gs://uatbucket/txt1.txt
gs://npebucket/txt2.txt,gs://uatbucket/txt2.txt
''',
      description: 'Each line: SRC_GCS_URI,DST_GCS_URI'
    )
  }

  stages {
    stage('Copy files NPE â†’ UAT') {
      steps {
        script {
          def mappings = params.npe_uat.trim().split("\\r?\\n").findAll { it.trim() }
          
          for (int i = 0; i < mappings.size(); i++) {
            def line = mappings[i]
            def parts = line.split(',')
            if (parts.size() != 2) {
              error "Invalid line format: ${line}"
            }
            def SRC = parts[0].trim()
            def DST = parts.trim()
            def BASENAME = SRC.tokenize('/').last()

            // Download step on NPE node
            node('npe-label') {
              sh """
                set -euo pipefail
                echo "Downloading $SRC on NPE node"
                mkdir -p jars
                gsutil cp "$SRC" "jars/${BASENAME}"
              """
              stash name: "bundle-${i}", includes: "jars/${BASENAME}"
              sh "rm -f jars/${BASENAME}"
            }

            // Upload step on UAT node
            node('uat-label') {
              unstash "bundle-${i}"
              sh """
                set -euo pipefail
                echo "Uploading ${BASENAME} to $DST on UAT node"
                gsutil cp "jars/${BASENAME}" "$DST"
                echo "Verify destination:"
                gsutil ls -l "$DST"
                echo "\\033[0;32mSUCCESS: ${BASENAME} copied to ${DST}\\033[0m"
                rm -f jars/${BASENAME}
              """
            }
          }
        }
      }
    }
  }
}
