pipeline {
    agent none

    stages {
        stage('Check File in NPE') {
            agent { label 'npe-agent-label' }
            steps {
                script {
                    def gcsPath = 'gs://your-npe-bucket-name/path/to/your/file.txt'
                    echo "Checking file in NPE bucket"
                    def fileExists = sh(script: "gsutil -q stat ${gcsPath}", returnStatus: true) == 0

                    if (fileExists) {
                        echo "File exists in NPE bucket"
                        build job: 'downstream-job-npe', wait: false
                    } else {
                        error "File does not exist in NPE bucket"
                    }
                }
            }
        }

        stage('Check File in UAT') {
            agent { label 'uat-agent-label' }
            steps {
                script {
                    def gcsPath = 'gs://your-uat-bucket-name/path/to/your/file.txt'
                    echo "Checking file in UAT bucket"
                    def fileExists = sh(script: "gsutil -q stat ${gcsPath}", returnStatus: true) == 0

                    if (fileExists) {
                        echo "File exists in UAT bucket"
                        build job: 'downstream-job-uat', wait: false
                    } else {
                        error "File does not exist in UAT bucket"
                    }
                }
            }
        }

        stage('Check File in PROD') {
            agent { label 'prod-agent-label' }
            steps {
                script {
                    def gcsPath = 'gs://your-prod-bucket-name/path/to/your/file.txt'
                    echo "Checking file in PROD bucket"
                    def fileExists = sh(script: "gsutil -q stat ${gcsPath}", returnStatus: true) == 0

                    if (fileExists) {
                        echo "File exists in PROD bucket"
                        build job: 'downstream-job-prod', wait: false
                    } else {
                        error "File does not exist in PROD bucket"
                    }
                }
            }
        }
    }
}
------------
pipeline {
    agent any

    environment {
        GCS_BUCKET = "your-gcs-path-to-file"
        PREFIX = "your-prefix-"
        PUBLIC_KEY = "path/to/your-public-key.asc"
    }

    stages {
        stage('Download and Add Prefix to File') {
            steps {
                script {
                    echo "Downloading file from GCS bucket"
                    sh "gsutil cp ${GCS_BUCKET} ."

                    echo "Extracting file name from GCS path"
                    env.FILE_NAME = sh(script: "echo ${GCS_BUCKET} | rev | cut -f1 -d '/' | rev", returnStdout: true).trim()

                    env.PREFIXED_FILE_NAME = "${PREFIX}${env.FILE_NAME}"

                    echo "Found file: ${env.FILE_NAME}"
                    sh "mv ${env.FILE_NAME} ${env.PREFIXED_FILE_NAME}"
                }
            }
        }

        stage('Encrypt File') {
            steps {
                script {
                    echo "Listing existing GPG keys"
                    sh "gpg --list-keys"

                    echo "Importing public key"
                    sh "gpg --import ${PUBLIC_KEY}"

                    echo "Encrypting file"
                    sh "gpg --output ${env.PREFIXED_FILE_NAME}.gpg --encrypt --recipient 'your-recipient-email' ${env.PREFIXED_FILE_NAME}"
                }
            }
        }

        stage('Upload Encrypted File to GCS') {
            steps {
                script {
                    echo "Uploading encrypted file to GCS bucket"
                    sh "gsutil cp ${env.PREFIXED_FILE_NAME}.gpg gs://${GCS_BUCKET%/*}/"
                }
            }
        }

        stage('Delete Original and Local Files') {
            steps {
                script {
                    echo "Deleting original file from GCS"
                    sh "gsutil rm ${GCS_BUCKET}"

                    echo "Cleaning up local files"
                    sh "rm -f ${env.PREFIXED_FILE_NAME} ${env.PREFIXED_FILE_NAME}.gpg"
                }
            }
        }
    }
}

